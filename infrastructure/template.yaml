AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Intelligent Mock Interview Assistant

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
  
Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        SESSIONS_TABLE: !Ref SessionsTable
        USERS_TABLE: !Ref UsersTable
        TRANSCRIPTS_BUCKET: !Ref TranscriptsBucket
        CORS_ORIGIN: !Sub "https://${CloudFrontDistribution.DomainName}"

Resources:
  # API Gateway HTTP API
  InterviewApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "http://localhost:3000"
          - !Sub "https://${CloudFrontDistribution.DomainName}"
        AllowHeaders:
          - Content-Type
          - Authorization
          - X-Amz-Date
          - X-Api-Key
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        MaxAge: 600
        AllowCredentials: false

  # Lambda Functions
  CreateSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../services/create-session/
      Handler: index.handler
      Events:
        CreateSession:
          Type: HttpApi
          Properties:
            ApiId: !Ref InterviewApi
            Path: /sessions
            Method: POST
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable

  GetQuestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../services/get-question/
      Handler: index.handler
      Events:
        GetQuestion:
          Type: HttpApi
          Properties:
            ApiId: !Ref InterviewApi
            Path: /sessions/{sessionId}/question
            Method: GET
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTable

  RecordTranscriptFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../services/record-transcript/
      Handler: index.handler
      Events:
        RecordTranscript:
          Type: HttpApi
          Properties:
            ApiId: !Ref InterviewApi
            Path: /sessions/{sessionId}/transcript
            Method: POST
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - S3WritePolicy:
            BucketName: !Ref TranscriptsBucket

  ScoreSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../services/score-session/
      Handler: index.handler
      Events:
        ScoreSession:
          Type: HttpApi
          Properties:
            ApiId: !Ref InterviewApi
            Path: /sessions/{sessionId}/score
            Method: POST
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTable
        - S3ReadPolicy:
            BucketName: !Ref TranscriptsBucket

  # DynamoDB Tables
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH

  # S3 Buckets
  TranscriptsBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: 
              - "http://localhost:3000"
              - !Sub "https://${CloudFrontDistribution.DomainName}"

  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  StaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticWebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: s3:GetObject
            Resource: !Sub "${StaticWebsiteBucket}/*"

  # CloudFront Distribution
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt StaticWebsiteBucket.RegionalDomainName
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        Enabled: true
        HttpVersion: http2

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${InterviewApi}.execute-api.${AWS::Region}.amazonaws.com"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  
  WebsiteURL:
    Description: CloudFront distribution URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteURL"
  
  TranscriptsBucket:
    Description: S3 bucket for transcripts
    Value: !Ref TranscriptsBucket
    Export:
      Name: !Sub "${AWS::StackName}-TranscriptsBucket"